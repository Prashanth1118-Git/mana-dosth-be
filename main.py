# import openai
# from fastapi import FastAPI
# from pydantic import BaseModel
# from fastapi.middleware.cors import CORSMiddleware
# import os

# # TEMP: Hardcoded API key for local testing
# openai.api_key = "Jma4FpgT3BlbkFJdQzBLVnDw9uVX1r1-OCqGREjQ78982v84cliq_LZ1vIcejhVvGO7AEtIgmAH3HSd8cWNw11h4A"

# app = FastAPI()

# app.add_middleware(
#     CORSMiddleware,
#     allow_origins=["*"],
#     allow_credentials=True,
#     allow_methods=["*"],
#     allow_headers=["*"],
# )

# class Question(BaseModel):
#     query: str

# @app.post("/ask")
# def ask_question(q: Question):
#     prompt = f"""
#     You are Mana Dosth üßëüèª‚Äçü§ù‚Äçüßëüèª ‚Äì a friendly multilingual assistant.
#     Respond like a local native from user's region.
#     Question: "{q.query}"
#     Reply in the same language in a warm, natural tone.
#     """

#     try:
#         response = openai.ChatCompletion.create(
#             model="gpt-3.5-turbo",
#             messages=[
#                 {"role": "system", "content": "You are a helpful and native-sounding assistant."},
#                 {"role": "user", "content": prompt}
#             ],
#             temperature=0.7
#         )
#         answer = response.choices[0].message.content.strip()
#         return {"answer": answer}

#     except Exception as e:
#         print("‚ùå ERROR contacting AI service:", str(e))  # üëà SHOW FULL ERROR
#         return {"answer": f"‚ùå Error contacting AI service: {str(e)}"}  # Return error in response


from fastapi import FastAPI
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

# Enable CORS for frontend communication
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # You can restrict to frontend URL later
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Request body model
class Question(BaseModel):
    query: str

# Chat route ‚Äî no OpenAI, just local response logic
@app.post("/ask")
def ask_question(q: Question):
    query = q.query.lower()

    # Sample multilingual friendly replies
    if "telugu" in query or "‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å" in query:
        return {"answer": "‡∞Ö‡∞®‡±ç‡∞®‡∞æ! ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞è‡∞Æ‡∞Ø‡∞ø‡∞Ç‡∞¶‡∞ø? ‡∞ö‡±Ü‡∞¨‡±Å ‡∞®‡±á‡∞®‡±Å ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å."}
    elif "hindi" in query or "‡§π‡§ø‡§Ç‡§¶‡•Ä" in query:
        return {"answer": "‡§≠‡§æ‡§à! ‡§ï‡•à‡§∏‡•á ‡§π‡•ã? ‡§Æ‡•à‡§Ç ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Å, ‡§¨‡§§‡§æ‡§ì‡•§"}
    elif "tamil" in query or "‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç" in query:
        return {"answer": "‡ÆÖ‡Æ£‡Øç‡Æ£‡Ææ! ‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø ‡Æá‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç? ‡Æé‡Æ©‡Øç‡Æ© ‡Æâ‡Æ§‡Æµ‡Æø ‡Æµ‡Øá‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç?"}
    elif "kannada" in query or "‡≤ï‡≤®‡≥ç‡≤®‡≤°" in query:
        return {"answer": "‡≤Ö‡≤£‡≥ç‡≤£‡≤æ! ‡≤π‡≥á‡≤ó‡≤ø‡≤¶‡≥ç‡≤¶‡≥Ä‡≤Ø? ‡≤®‡≤æ‡≤®‡≤ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤á‡≤¶‡≥ç‡≤¶‡≥Ä‡≤®‡≤ø."}
    elif "dosth" in query or "anna" in query:
        return {"answer": "‡∞Ö‡∞®‡±ç‡∞®‡∞æ ‡∞®‡±á‡∞®‡±ä‡∞ï‡±ç‡∞ï‡∞°‡∞ø‡∞®‡±á ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å! ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡±Å ‡∞è‡∞Ç ‡∞ï‡∞æ‡∞µ‡∞æ‡∞≤‡∞ø?"}
    elif "hello" in query or "hi" in query:
        return {"answer": "Hi dosth! ‡∞é‡∞≤‡∞æ ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞µ‡±Å?"}
    else:
        return {"answer": "üòÑ Dosth is thinking... tell me more clearly!"}

